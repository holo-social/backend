model Field {
    id          String @id
    authorId    String

    name        String
    value       String

    user        User @relation(fields: [authorId], references: [id])
}

model User {
    id          String @id
    host        String
    username    String

    email       String? @unique
    password    String? // BackendやWheet経由ではパスワードなしのユーザーは作成できない。ただシステムのユーザー用にNoneなパスワードも設定できるようになってる

    displayName String?
    description String?

    avatarUrl   String?
    bannerUrl   String?

    bday        DateTime?
    address     String?

    manuallyApprovesFollowers   Boolean @default(false)
    discoverable                Boolean @default(true)

    publicKeyPem String
    publicKeyOwner  String

    privateKeyPem   String?

    accessTokens           AccessToken[]
    channelFollowees ChannelFollow[] @relation("channelFollowee")
    notes       Note[]
    reactions   Reactions[]
    fields      Field[]
    followees   Follow[]       @relation("followee")
    followers   Follow[]       @relation("follower")
    instance    Instance?      @relation(fields: [host], references: [host])
}

model Follow {
    followerId String
    followeeId String

    createdAt  DateTime @default(now())

    followee   User     @relation("followee", fields: [followeeId], references: [id], onDelete: Cascade)
    follower   User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)

    @@id([followerId, followeeId])
}


model AccessToken {
    id               String         @id

    createdAt        DateTime       @default(now()) @map("created_at")
    updatedAt        DateTime?       @updatedAt
    expiresAt        DateTime?

    name             String

    scope            String[] // if WebClient: web:read, web:write

    token            String         @unique

    userId           String
    user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

    fromWeb          Boolean        @default(false)

    @@index([token])
}